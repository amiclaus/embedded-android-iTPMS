;/*******************************************************
;This program was created by the CodeWizardAVR V3.25
;Automatic Program Generator
;© Copyright 1998-2016 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 3/17/2016
;Author  :
;Company :
;Comments:
;
;
;Chip type               : ATmega64A
;Program type            : Application
;AVR Core Clock frequency: 8.000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 1024
;*******************************************************/
;
;#include <io.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x20
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x1C
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x10
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x18
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x14
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x1C
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x08
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <delay.h>
;#include <stdlib.h>
;#include <mega64a.h>
;
;// Declare your global variables here
;unsigned long int freq1c,freq2c,speed_rpm,speed_ecu,speed_ecu_prev,tire_dim,steer_wheel;
;unsigned long i=0,j=0,dur1,dur2,s=0, in, ok=0,tr=0,sp=0,sw=0,m=0,done=0,cycle;
;char input[20],td[6],sp_ecu[6],st_wh[6],buffer1[6],buffer2[6],buffer3[6],LT='0',RT='0';
;
;#define DATA_REGISTER_EMPTY (1<<UDRE0)
;#define RX_COMPLETE (1<<RXC1)
;#define FRAMING_ERROR (1<<FE1)
;#define PARITY_ERROR (1<<UPE1)
;#define DATA_OVERRUN (1<<DOR1)
;
;#pragma used+
;char getchar1(void)
; 0000 0029 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 002A unsigned char status;
; 0000 002B char data;
; 0000 002C while (1)
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;	status -> R17
;	data -> R16
;PCODE: $00000011 VOL: 0
; 0000 002D       {
; 0000 002E       while (((status=UCSR1A) & RX_COMPLETE)==0);
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
; 0000 002F       data=UDR1;
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
; 0000 0030       if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
; 0000 0031          return data;
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 0000 0032       }
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
; 0000 0033 }
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;void putchar0(char c)
; 0000 0035 {
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
; 0000 0036 while ((UCSR0A & DATA_REGISTER_EMPTY)==0);
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;	c -> R17
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
; 0000 0037 UDR0=c;
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
; 0000 0038 }
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;#pragma used-
;// Timer1 overflow interrupt service routine
;interrupt [TIM1_OVF] void timer1_ovf_isr(void)
; 0000 003C {
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
; 0000 003D // Place your code here
; 0000 003E     i++;
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
; 0000 003F }
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;
;// Timer2 overflow interrupt service routine
;interrupt [TIM2_OVF] void timer2_ovf_isr(void)
; 0000 0043 {
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
; 0000 0044 // Place your code here
; 0000 0045     j++;
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
; 0000 0046 }
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;
;void main(void)
; 0000 0049 {
;PCODE: $00000048 VOL: 0
; 0000 004A // Declare your local variables here
; 0000 004B 
; 0000 004C // Input/Output Ports initialization
; 0000 004D // Port A initialization
; 0000 004E // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 004F DDRA=(0<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (0<<DDA3) | (0<<DDA2) | (0<<DDA1) | (0<<DDA0);
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
; 0000 0050 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 0051 PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
; 0000 0052 
; 0000 0053 // Port B initialization
; 0000 0054 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 0055 DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (0<<DDB3) | (0<<DDB2) | (0<<DDB1) | (0<<DDB0);
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
; 0000 0056 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 0057 PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
; 0000 0058 
; 0000 0059 // Port C initialization
; 0000 005A // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 005B DDRC=(0<<DDC7) | (0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
; 0000 005C // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 005D PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
; 0000 005E 
; 0000 005F // Port D initialization
; 0000 0060 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 0061 DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
; 0000 0062 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 0063 PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
; 0000 0064 
; 0000 0065 // Port E initialization
; 0000 0066 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 0067 DDRE=(0<<DDE7) | (0<<DDE6) | (0<<DDE5) | (0<<DDE4) | (0<<DDE3) | (0<<DDE2) | (0<<DDE1) | (0<<DDE0);
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
; 0000 0068 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 0069 PORTE=(0<<PORTE7) | (0<<PORTE6) | (0<<PORTE5) | (0<<PORTE4) | (0<<PORTE3) | (0<<PORTE2) | (0<<PORTE1) | (0<<PORTE0);
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
; 0000 006A 
; 0000 006B // Port F initialization
; 0000 006C // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 006D DDRF=(0<<DDF7) | (0<<DDF6) | (0<<DDF5) | (0<<DDF4) | (0<<DDF3) | (0<<DDF2) | (0<<DDF1) | (0<<DDF0);
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
; 0000 006E // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 006F PORTF=(0<<PORTF7) | (0<<PORTF6) | (0<<PORTF5) | (0<<PORTF4) | (0<<PORTF3) | (0<<PORTF2) | (0<<PORTF1) | (0<<PORTF0);
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
; 0000 0070 
; 0000 0071 // Port G initialization
; 0000 0072 // Function: Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 0073 DDRG=(0<<DDG4) | (0<<DDG3) | (0<<DDG2) | (0<<DDG1) | (0<<DDG0);
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
; 0000 0074 // State: Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 0075 PORTG=(0<<PORTG4) | (0<<PORTG3) | (0<<PORTG2) | (0<<PORTG1) | (0<<PORTG0);
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
; 0000 0076 
; 0000 0077 // Timer/Counter 0 initialization
; 0000 0078 // Clock source: System Clock
; 0000 0079 // Clock value: Timer 0 Stopped
; 0000 007A // Mode: Normal top=0xFF
; 0000 007B // OC0 output: Disconnected
; 0000 007C ASSR=0<<AS0;
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
; 0000 007D TCCR0=(0<<WGM00) | (0<<COM01) | (0<<COM00) | (0<<WGM01) | (0<<CS02) | (0<<CS01) | (0<<CS00);
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
; 0000 007E TCNT0=0x00;
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
; 0000 007F OCR0=0x00;
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
; 0000 0080 
; 0000 0081 // Timer/Counter 1 initialization
; 0000 0082 // Clock source: System Clock
; 0000 0083 // Clock value: 8000.000 kHz
; 0000 0084 // Mode: Fast PWM top=0x00FF
; 0000 0085 // OC1A output: Disconnected
; 0000 0086 // OC1B output: Disconnected
; 0000 0087 // OC1C output: Disconnected
; 0000 0088 // Noise Canceler: Off
; 0000 0089 // Input Capture on Rising Edge
; 0000 008A // Timer Period: 0.032 ms
; 0000 008B // Timer1 Overflow Interrupt: On
; 0000 008C // Input Capture Interrupt: Off
; 0000 008D // Compare A Match Interrupt: Off
; 0000 008E // Compare B Match Interrupt: Off
; 0000 008F // Compare C Match Interrupt: Off
; 0000 0090 TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<COM1C1) | (0<<COM1C0) | (0<<WGM11) | (1<<WGM10);
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
; 0000 0091 TCCR1B=(0<<ICNC1) | (1<<ICES1) | (0<<WGM13) | (1<<WGM12) | (0<<CS12) | (0<<CS11) | (1<<CS10);
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
; 0000 0092 TCNT1H=0x00;
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
; 0000 0093 TCNT1L=0x00;
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
; 0000 0094 ICR1H=0x00;
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
; 0000 0095 ICR1L=0x00;
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
; 0000 0096 OCR1AH=0x00;
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
; 0000 0097 OCR1AL=0x00;
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
; 0000 0098 OCR1BH=0x00;
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
; 0000 0099 OCR1BL=0x00;
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
; 0000 009A OCR1CH=0x00;
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
; 0000 009B OCR1CL=0x00;
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
; 0000 009C 
; 0000 009D // Timer/Counter 2 initialization
; 0000 009E // Clock source: System Clock
; 0000 009F // Clock value: 8000.000 kHz
; 0000 00A0 // Mode: Normal top=0xFF
; 0000 00A1 // OC2 output: Disconnected
; 0000 00A2 // Timer Period: 0.032 ms
; 0000 00A3 TCCR2=(0<<WGM20) | (0<<COM21) | (0<<COM20) | (0<<WGM21) | (0<<CS22) | (0<<CS21) | (1<<CS20);
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
; 0000 00A4 TCNT2=0x00;
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
; 0000 00A5 OCR2=0x00;
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
; 0000 00A6 
; 0000 00A7 // Timer/Counter 3 initialization
; 0000 00A8 // Clock source: System Clock
; 0000 00A9 // Clock value: Timer3 Stopped
; 0000 00AA // Mode: Normal top=0xFFFF
; 0000 00AB // OC3A output: Disconnected
; 0000 00AC // OC3B output: Disconnected
; 0000 00AD // OC3C output: Disconnected
; 0000 00AE // Noise Canceler: Off
; 0000 00AF // Input Capture on Falling Edge
; 0000 00B0 // Timer3 Overflow Interrupt: Off
; 0000 00B1 // Input Capture Interrupt: Off
; 0000 00B2 // Compare A Match Interrupt: Off
; 0000 00B3 // Compare B Match Interrupt: Off
; 0000 00B4 // Compare C Match Interrupt: Off
; 0000 00B5 TCCR3A=(0<<COM3A1) | (0<<COM3A0) | (0<<COM3B1) | (0<<COM3B0) | (0<<COM3C1) | (0<<COM3C0) | (0<<WGM31) | (0<<WGM30);
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
; 0000 00B6 TCCR3B=(0<<ICNC3) | (1<<ICES3) | (0<<WGM33) | (0<<WGM32) | (0<<CS32) | (0<<CS31) | (0<<CS30);
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
; 0000 00B7 TCNT3H=0x00;
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
; 0000 00B8 TCNT3L=0x00;
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
; 0000 00B9 ICR3H=0x00;
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
; 0000 00BA ICR3L=0x00;
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
; 0000 00BB OCR3AH=0x00;
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
; 0000 00BC OCR3AL=0x00;
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
; 0000 00BD OCR3BH=0x00;
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
; 0000 00BE OCR3BL=0x00;
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
; 0000 00BF OCR3CH=0x00;
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
; 0000 00C0 OCR3CL=0x00;
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
; 0000 00C1 
; 0000 00C2 // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 00C3 TIMSK=(0<<OCIE2) | (1<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (1<<TOIE1) | (0<<OCIE0) | (0<<TOIE0);
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
; 0000 00C4 ETIMSK=(0<<TICIE3) | (0<<OCIE3A) | (0<<OCIE3B) | (0<<TOIE3) | (0<<OCIE3C) | (0<<OCIE1C);
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
; 0000 00C5 
; 0000 00C6 // External Interrupt(s) initialization
; 0000 00C7 // INT0: Off
; 0000 00C8 // INT1: Off
; 0000 00C9 // INT2: Off
; 0000 00CA // INT3: Off
; 0000 00CB // INT4: Off
; 0000 00CC // INT5: Off
; 0000 00CD // INT6: Off
; 0000 00CE // INT7: Off
; 0000 00CF EICRA=(0<<ISC31) | (0<<ISC30) | (0<<ISC21) | (0<<ISC20) | (0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
; 0000 00D0 EICRB=(0<<ISC71) | (0<<ISC70) | (0<<ISC61) | (0<<ISC60) | (0<<ISC51) | (0<<ISC50) | (0<<ISC41) | (0<<ISC40);
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
; 0000 00D1 EIMSK=(0<<INT7) | (0<<INT6) | (0<<INT5) | (0<<INT4) | (0<<INT3) | (0<<INT2) | (0<<INT1) | (0<<INT0);
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
; 0000 00D2 
; 0000 00D3 // USART0 initialization
; 0000 00D4 // Communication Parameters: 8 Data, 1 Stop, No Parity
; 0000 00D5 // USART0 Receiver: Off
; 0000 00D6 // USART0 Transmitter: On
; 0000 00D7 // USART0 Mode: Asynchronous
; 0000 00D8 // USART0 Baud Rate: 9600
; 0000 00D9 UCSR0A=(0<<RXC0) | (0<<TXC0) | (0<<UDRE0) | (0<<FE0) | (0<<DOR0) | (0<<UPE0) | (0<<U2X0) | (0<<MPCM0);
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
; 0000 00DA UCSR0B=(0<<RXCIE0) | (0<<TXCIE0) | (0<<UDRIE0) | (0<<RXEN0) | (1<<TXEN0) | (0<<UCSZ02) | (0<<RXB80) | (0<<TXB80);
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
; 0000 00DB UCSR0C=(0<<UMSEL0) | (0<<UPM01) | (0<<UPM00) | (0<<USBS0) | (1<<UCSZ01) | (1<<UCSZ00) | (0<<UCPOL0);
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
; 0000 00DC UBRR0H=0x00;
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
; 0000 00DD UBRR0L=0x33;
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
; 0000 00DE 
; 0000 00DF // USART1 initialization
; 0000 00E0 // Communication Parameters: 8 Data, 1 Stop, No Parity
; 0000 00E1 // USART1 Receiver: On
; 0000 00E2 // USART1 Transmitter: Off
; 0000 00E3 // USART1 Mode: Asynchronous
; 0000 00E4 // USART1 Baud Rate: 9600
; 0000 00E5 UCSR1A=(0<<RXC1) | (0<<TXC1) | (0<<UDRE1) | (0<<FE1) | (0<<DOR1) | (0<<UPE1) | (0<<U2X1) | (0<<MPCM1);
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
; 0000 00E6 UCSR1B=(0<<RXCIE1) | (0<<TXCIE1) | (0<<UDRIE1) | (1<<RXEN1) | (0<<TXEN1) | (0<<UCSZ12) | (0<<RXB81) | (0<<TXB81);
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
; 0000 00E7 UCSR1C=(0<<UMSEL1) | (0<<UPM11) | (0<<UPM10) | (0<<USBS1) | (1<<UCSZ11) | (1<<UCSZ10) | (0<<UCPOL1);
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
; 0000 00E8 UBRR1H=0x00;
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
; 0000 00E9 UBRR1L=0x33;
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
; 0000 00EA 
; 0000 00EB // Analog Comparator initialization
; 0000 00EC // Analog Comparator: Off
; 0000 00ED // The Analog Comparator's positive input is
; 0000 00EE // connected to the AIN0 pin
; 0000 00EF // The Analog Comparator's negative input is
; 0000 00F0 // connected to the AIN1 pin
; 0000 00F1 ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
; 0000 00F2 SFIOR=(0<<ACME);
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
; 0000 00F3 
; 0000 00F4 // ADC initialization
; 0000 00F5 // ADC disabled
; 0000 00F6 ADCSRA=(0<<ADEN) | (0<<ADSC) | (0<<ADFR) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (0<<ADPS1) | (0<<ADPS0);
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
; 0000 00F7 
; 0000 00F8 // SPI initialization
; 0000 00F9 // SPI disabled
; 0000 00FA SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
; 0000 00FB 
; 0000 00FC // TWI initialization
; 0000 00FD // TWI disabled
; 0000 00FE TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
; 0000 00FF 
; 0000 0100 // Globally enable interrupts
; 0000 0101 #asm("sei")
;PCODE: $000000CB VOL: 0
	sei
;PCODE: $000000CC VOL: 0
; 0000 0102 TCCR2=0x00;
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
; 0000 0103 TCCR1B=0x00;
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
; 0000 0104 TCCR1A=0x01;
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
; 0000 0105 TCNT1=0x00;
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
; 0000 0106 TCNT2=0x00;
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
; 0000 0107 TIMSK=0x00;
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
; 0000 0108 
; 0000 0109 while (1){
;PCODE: $000000D9 VOL: 0
; 0000 010A         in=0;
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
; 0000 010B         ok=0;
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
; 0000 010C         tr=0;
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
; 0000 010D         sp=0;
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
; 0000 010E         sw=0;
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
; 0000 010F         m=0;
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
; 0000 0110         done=0;
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
; 0000 0111         while (1){
;PCODE: $000000E8 VOL: 0
; 0000 0112             if (getchar1()=='V'){
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
; 0000 0113              while (1){
;PCODE: $000000EC VOL: 0
; 0000 0114                 input[in]=getchar1();
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
; 0000 0115                 if (input[in]=='V'){
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
; 0000 0116                     done=1;
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
; 0000 0117                     break;
;PCODE: $000000FA VOL: 0
; 0000 0118                     }
; 0000 0119                 else
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
; 0000 011A                     in=in+1;
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
; 0000 011B                 }
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
; 0000 011C             }
; 0000 011D             if (done==1)
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
; 0000 011E                 break;
;PCODE: $00000107 VOL: 0
; 0000 011F         }
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
; 0000 0120         input[in+1]='\0';
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
; 0000 0121         for (m =0;m<in; m++){
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
; 0000 0122             if (input[m]=='T'){
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
; 0000 0123                 ok=1;
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
; 0000 0124                 m=m+1;
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
; 0000 0125             }
; 0000 0126             if (input[m]=='S'){
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
; 0000 0127                 ok=2;
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
; 0000 0128                 m=m+1;
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
; 0000 0129             }
; 0000 012A             if (ok==0){
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
; 0000 012B                 td[tr]=input[m];
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
; 0000 012C                 tr=tr+1;
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
; 0000 012D             }
; 0000 012E             else if(ok==1){
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
; 0000 012F                 sp_ecu[sp]=input[m];
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
; 0000 0130                 sp=sp+1;
;PCODE: $00000149 VOL: 0
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
; 0000 0131             }
; 0000 0132             else{
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
; 0000 0133                 st_wh[sw]=input[m];
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 0
;PCODE: $00000150 VOL: 0
;PCODE: $00000151 VOL: 0
;PCODE: $00000152 VOL: 0
;PCODE: $00000153 VOL: 0
; 0000 0134                 sw=sw+1;
;PCODE: $00000154 VOL: 0
;PCODE: $00000155 VOL: 0
;PCODE: $00000156 VOL: 0
; 0000 0135             }
;PCODE: $00000157 VOL: 0
;PCODE: $00000158 VOL: 0
; 0000 0136         }
;PCODE: $00000159 VOL: 0
;PCODE: $0000015A VOL: 0
;PCODE: $0000015B VOL: 0
;PCODE: $0000015C VOL: 0
;PCODE: $0000015D VOL: 0
;PCODE: $0000015E VOL: 0
;PCODE: $0000015F VOL: 0
; 0000 0137         td[tr]='\0';
;PCODE: $00000160 VOL: 0
;PCODE: $00000161 VOL: 0
;PCODE: $00000162 VOL: 0
;PCODE: $00000163 VOL: 0
; 0000 0138         sp_ecu[sp]='\0';
;PCODE: $00000164 VOL: 0
;PCODE: $00000165 VOL: 0
;PCODE: $00000166 VOL: 0
;PCODE: $00000167 VOL: 0
; 0000 0139         st_wh[sw]='\0';
;PCODE: $00000168 VOL: 0
;PCODE: $00000169 VOL: 0
;PCODE: $0000016A VOL: 0
;PCODE: $0000016B VOL: 0
; 0000 013A 
; 0000 013B         tire_dim = atoi(td);
;PCODE: $0000016C VOL: 0
;PCODE: $0000016D VOL: 0
;PCODE: $0000016E VOL: 0
;PCODE: $0000016F VOL: 0
; 0000 013C         speed_ecu = atoi(sp_ecu);
;PCODE: $00000170 VOL: 0
;PCODE: $00000171 VOL: 0
;PCODE: $00000172 VOL: 0
;PCODE: $00000173 VOL: 0
; 0000 013D         steer_wheel = atoi(st_wh);
;PCODE: $00000174 VOL: 0
;PCODE: $00000175 VOL: 0
;PCODE: $00000176 VOL: 0
;PCODE: $00000177 VOL: 0
; 0000 013E 
; 0000 013F //      Place your code here
; 0000 0140         TIMSK=0x04; // enable overflow interrupt of timer1
;PCODE: $00000178 VOL: 0
;PCODE: $00000179 VOL: 0
; 0000 0141         TCNT1=0x00;
;PCODE: $0000017A VOL: 0
;PCODE: $0000017B VOL: 0
; 0000 0142         TCCR1B=0x4F; /* start timer1 with external pulses (T1 rising edge) */
;PCODE: $0000017C VOL: 0
;PCODE: $0000017D VOL: 0
; 0000 0143         delay_ms(500); // wait for one second
;PCODE: $0000017E VOL: 0
;PCODE: $0000017F VOL: 0
; 0000 0144         TCCR1B=0x00; //stop timer1
;PCODE: $00000180 VOL: 0
;PCODE: $00000181 VOL: 0
; 0000 0145         dur1=TCNT1; /* store the number of counts from TCNT1 register */
;PCODE: $00000182 VOL: 0
;PCODE: $00000183 VOL: 0
;PCODE: $00000184 VOL: 0
; 0000 0146         TIMSK=0x00; //disable interrupt
;PCODE: $00000185 VOL: 0
;PCODE: $00000186 VOL: 0
; 0000 0147         freq1c = (dur1+i*256)*2; /* calculate the frequency as in previous equation */
;PCODE: $00000187 VOL: 0
;PCODE: $00000188 VOL: 0
;PCODE: $00000189 VOL: 0
;PCODE: $0000018A VOL: 0
;PCODE: $0000018B VOL: 0
;PCODE: $0000018C VOL: 0
;PCODE: $0000018D VOL: 0
;PCODE: $0000018E VOL: 0
; 0000 0148         freq1c = freq1c;//*10000/9635;
;PCODE: $0000018F VOL: 0
;PCODE: $00000190 VOL: 0
; 0000 0149         TCNT1=0x00; /* clear TCNT1 register for the next reading */
;PCODE: $00000191 VOL: 0
;PCODE: $00000192 VOL: 0
; 0000 014A         i=0; /* clear number of overflows in one second for the next reading */
;PCODE: $00000193 VOL: 0
;PCODE: $00000194 VOL: 0
; 0000 014B         ltoa(freq1c,buffer1);
;PCODE: $00000195 VOL: 0
;PCODE: $00000196 VOL: 0
;PCODE: $00000197 VOL: 0
;PCODE: $00000198 VOL: 0
; 0000 014C 
; 0000 014D         TIMSK=0x40;
;PCODE: $00000199 VOL: 0
;PCODE: $0000019A VOL: 0
; 0000 014E         TCNT2=0x00;
;PCODE: $0000019B VOL: 0
;PCODE: $0000019C VOL: 0
; 0000 014F         TCCR2=0x07;
;PCODE: $0000019D VOL: 0
;PCODE: $0000019E VOL: 0
; 0000 0150         delay_ms(500); // wait for one second
;PCODE: $0000019F VOL: 0
;PCODE: $000001A0 VOL: 0
; 0000 0151         TCCR2=0x00; //stop timer2
;PCODE: $000001A1 VOL: 0
;PCODE: $000001A2 VOL: 0
; 0000 0152         dur2=TCNT2; /* store the number of counts in TCNT3 register */
;PCODE: $000001A3 VOL: 0
;PCODE: $000001A4 VOL: 0
;PCODE: $000001A5 VOL: 0
; 0000 0153         TIMSK=0x00;
;PCODE: $000001A6 VOL: 0
;PCODE: $000001A7 VOL: 0
; 0000 0154         freq2c = (dur2 + j*256)*2; /* calculate the frequency */
;PCODE: $000001A8 VOL: 0
;PCODE: $000001A9 VOL: 0
;PCODE: $000001AA VOL: 0
;PCODE: $000001AB VOL: 0
;PCODE: $000001AC VOL: 0
;PCODE: $000001AD VOL: 0
;PCODE: $000001AE VOL: 0
;PCODE: $000001AF VOL: 0
; 0000 0155         TCNT2=0x00; /* clear TCNT1 register for the next reading */
;PCODE: $000001B0 VOL: 0
;PCODE: $000001B1 VOL: 0
; 0000 0156         j=0; /* clear number of overflows in one second for the next reading */
;PCODE: $000001B2 VOL: 0
;PCODE: $000001B3 VOL: 0
; 0000 0157 //        if (freq2c!=0){
; 0000 0158 //            freq2c=freq2c+30;
; 0000 0159 //        }
; 0000 015A         s=0;
;PCODE: $000001B4 VOL: 0
;PCODE: $000001B5 VOL: 0
; 0000 015B          ltoa(freq2c,buffer2);
;PCODE: $000001B6 VOL: 0
;PCODE: $000001B7 VOL: 0
;PCODE: $000001B8 VOL: 0
;PCODE: $000001B9 VOL: 0
; 0000 015C         while (buffer1[s]!='\0'){
;PCODE: $000001BA VOL: 0
;PCODE: $000001BB VOL: 0
;PCODE: $000001BC VOL: 0
;PCODE: $000001BD VOL: 0
;PCODE: $000001BE VOL: 0
;PCODE: $000001BF VOL: 0
; 0000 015D             putchar0(buffer1[s]);
;PCODE: $000001C0 VOL: 0
;PCODE: $000001C1 VOL: 0
;PCODE: $000001C2 VOL: 0
;PCODE: $000001C3 VOL: 0
; 0000 015E             s++;
;PCODE: $000001C4 VOL: 0
;PCODE: $000001C5 VOL: 0
;PCODE: $000001C6 VOL: 0
;PCODE: $000001C7 VOL: 0
; 0000 015F         }
;PCODE: $000001C8 VOL: 0
;PCODE: $000001C9 VOL: 0
; 0000 0160         putchar0(',');
;PCODE: $000001CA VOL: 0
;PCODE: $000001CB VOL: 0
; 0000 0161 
; 0000 0162         s=0;
;PCODE: $000001CC VOL: 0
;PCODE: $000001CD VOL: 0
; 0000 0163         while (buffer2[s]!='\0'){
;PCODE: $000001CE VOL: 0
;PCODE: $000001CF VOL: 0
;PCODE: $000001D0 VOL: 0
;PCODE: $000001D1 VOL: 0
;PCODE: $000001D2 VOL: 0
;PCODE: $000001D3 VOL: 0
; 0000 0164             putchar0(buffer2[s]);
;PCODE: $000001D4 VOL: 0
;PCODE: $000001D5 VOL: 0
;PCODE: $000001D6 VOL: 0
;PCODE: $000001D7 VOL: 0
; 0000 0165             s++;
;PCODE: $000001D8 VOL: 0
;PCODE: $000001D9 VOL: 0
;PCODE: $000001DA VOL: 0
;PCODE: $000001DB VOL: 0
; 0000 0166         }
;PCODE: $000001DC VOL: 0
;PCODE: $000001DD VOL: 0
; 0000 0167         putchar0(';');
;PCODE: $000001DE VOL: 0
;PCODE: $000001DF VOL: 0
; 0000 0168 
; 0000 0169         speed_rpm = ((freq1c+freq2c)/2.0)*3.14*tire_dim*6/10000;
;PCODE: $000001E0 VOL: 0
;PCODE: $000001E1 VOL: 0
;PCODE: $000001E2 VOL: 0
;PCODE: $000001E3 VOL: 0
;PCODE: $000001E4 VOL: 0
;PCODE: $000001E5 VOL: 0
;PCODE: $000001E6 VOL: 0
;PCODE: $000001E7 VOL: 0
;PCODE: $000001E8 VOL: 0
;PCODE: $000001E9 VOL: 0
;PCODE: $000001EA VOL: 0
;PCODE: $000001EB VOL: 0
;PCODE: $000001EC VOL: 0
;PCODE: $000001ED VOL: 0
;PCODE: $000001EE VOL: 0
;PCODE: $000001EF VOL: 0
;PCODE: $000001F0 VOL: 0
;PCODE: $000001F1 VOL: 0
;PCODE: $000001F2 VOL: 0
;PCODE: $000001F3 VOL: 0
;PCODE: $000001F4 VOL: 0
; 0000 016A 
; 0000 016B         if (steer_wheel==0){
;PCODE: $000001F5 VOL: 0
;PCODE: $000001F6 VOL: 0
;PCODE: $000001F7 VOL: 0
; 0000 016C             if (speed_ecu==speed_ecu_prev){
;PCODE: $000001F8 VOL: 0
;PCODE: $000001F9 VOL: 0
;PCODE: $000001FA VOL: 0
;PCODE: $000001FB VOL: 0
; 0000 016D                 if (cycle==3){
;PCODE: $000001FC VOL: 0
;PCODE: $000001FD VOL: 0
;PCODE: $000001FE VOL: 0
; 0000 016E                      if (freq1c>(freq2c+30))
;PCODE: $000001FF VOL: 0
;PCODE: $00000200 VOL: 0
;PCODE: $00000201 VOL: 0
;PCODE: $00000202 VOL: 0
;PCODE: $00000203 VOL: 0
; 0000 016F                         LT='1';
;PCODE: $00000204 VOL: 0
;PCODE: $00000205 VOL: 0
; 0000 0170                      else if (freq2c>(freq1c+30))
;PCODE: $00000206 VOL: 0
;PCODE: $00000207 VOL: 0
;PCODE: $00000208 VOL: 0
;PCODE: $00000209 VOL: 0
;PCODE: $0000020A VOL: 0
;PCODE: $0000020B VOL: 0
;PCODE: $0000020C VOL: 0
; 0000 0171                         RT='1';
;PCODE: $0000020D VOL: 0
;PCODE: $0000020E VOL: 0
; 0000 0172                      else if (speed_rpm>speed_ecu+5){
;PCODE: $0000020F VOL: 0
;PCODE: $00000210 VOL: 0
;PCODE: $00000211 VOL: 0
;PCODE: $00000212 VOL: 0
;PCODE: $00000213 VOL: 0
;PCODE: $00000214 VOL: 0
;PCODE: $00000215 VOL: 0
; 0000 0173                         LT='1';
;PCODE: $00000216 VOL: 0
;PCODE: $00000217 VOL: 0
; 0000 0174                         RT='1';
;PCODE: $00000218 VOL: 0
;PCODE: $00000219 VOL: 0
; 0000 0175                      }
; 0000 0176                      else
;PCODE: $0000021A VOL: 0
;PCODE: $0000021B VOL: 0
; 0000 0177                         cycle=0;
;PCODE: $0000021C VOL: 0
;PCODE: $0000021D VOL: 0
; 0000 0178                 }
;PCODE: $0000021E VOL: 0
;PCODE: $0000021F VOL: 0
;PCODE: $00000220 VOL: 0
; 0000 0179                 else{
;PCODE: $00000221 VOL: 0
;PCODE: $00000222 VOL: 0
; 0000 017A                     cycle=cycle+1;
;PCODE: $00000223 VOL: 0
;PCODE: $00000224 VOL: 0
;PCODE: $00000225 VOL: 0
; 0000 017B                 }
;PCODE: $00000226 VOL: 0
; 0000 017C             }
; 0000 017D             else {
;PCODE: $00000227 VOL: 0
;PCODE: $00000228 VOL: 0
; 0000 017E                 cycle=0;
;PCODE: $00000229 VOL: 0
;PCODE: $0000022A VOL: 0
; 0000 017F             }
;PCODE: $0000022B VOL: 0
; 0000 0180         }
; 0000 0181         else{
;PCODE: $0000022C VOL: 0
;PCODE: $0000022D VOL: 0
; 0000 0182             cycle=0;
;PCODE: $0000022E VOL: 0
;PCODE: $0000022F VOL: 0
; 0000 0183         }
;PCODE: $00000230 VOL: 0
; 0000 0184        if ((freq1c==0&&freq2c==0)||(sp_ecu==0)){
;PCODE: $00000231 VOL: 0
;PCODE: $00000232 VOL: 0
;PCODE: $00000233 VOL: 0
;PCODE: $00000234 VOL: 0
;PCODE: $00000235 VOL: 0
;PCODE: $00000236 VOL: 0
;PCODE: $00000237 VOL: 0
;PCODE: $00000238 VOL: 0
;PCODE: $00000239 VOL: 0
;PCODE: $0000023A VOL: 0
;PCODE: $0000023B VOL: 0
;PCODE: $0000023C VOL: 0
;PCODE: $0000023D VOL: 0
; 0000 0185         LT='0';
;PCODE: $0000023E VOL: 0
;PCODE: $0000023F VOL: 0
; 0000 0186         RT='0';
;PCODE: $00000240 VOL: 0
;PCODE: $00000241 VOL: 0
; 0000 0187         cycle=0;
;PCODE: $00000242 VOL: 0
;PCODE: $00000243 VOL: 0
; 0000 0188        }
; 0000 0189         putchar0(LT);
;PCODE: $00000244 VOL: 0
;PCODE: $00000245 VOL: 0
;PCODE: $00000246 VOL: 0
; 0000 018A         putchar0('L');
;PCODE: $00000247 VOL: 0
;PCODE: $00000248 VOL: 0
; 0000 018B         putchar0(RT);
;PCODE: $00000249 VOL: 0
;PCODE: $0000024A VOL: 0
; 0000 018C         putchar0('R');
;PCODE: $0000024B VOL: 0
;PCODE: $0000024C VOL: 0
; 0000 018D 
; 0000 018E         if ((LT=='1')||RT=='1'){
;PCODE: $0000024D VOL: 0
;PCODE: $0000024E VOL: 0
;PCODE: $0000024F VOL: 0
;PCODE: $00000250 VOL: 0
;PCODE: $00000251 VOL: 0
;PCODE: $00000252 VOL: 0
;PCODE: $00000253 VOL: 0
;PCODE: $00000254 VOL: 0
; 0000 018F             speed_rpm=speed_ecu;
;PCODE: $00000255 VOL: 0
;PCODE: $00000256 VOL: 0
; 0000 0190         }
; 0000 0191         s=0;
;PCODE: $00000257 VOL: 0
;PCODE: $00000258 VOL: 0
;PCODE: $00000259 VOL: 0
; 0000 0192         ltoa(speed_rpm,buffer3);
;PCODE: $0000025A VOL: 0
;PCODE: $0000025B VOL: 0
;PCODE: $0000025C VOL: 0
;PCODE: $0000025D VOL: 0
; 0000 0193         while (buffer3[s]!='\0'){
;PCODE: $0000025E VOL: 0
;PCODE: $0000025F VOL: 0
;PCODE: $00000260 VOL: 0
;PCODE: $00000261 VOL: 0
;PCODE: $00000262 VOL: 0
;PCODE: $00000263 VOL: 0
; 0000 0194                 putchar0(buffer3[s]);
;PCODE: $00000264 VOL: 0
;PCODE: $00000265 VOL: 0
;PCODE: $00000266 VOL: 0
;PCODE: $00000267 VOL: 0
; 0000 0195                 s++;
;PCODE: $00000268 VOL: 0
;PCODE: $00000269 VOL: 0
;PCODE: $0000026A VOL: 0
;PCODE: $0000026B VOL: 0
; 0000 0196         }
;PCODE: $0000026C VOL: 0
;PCODE: $0000026D VOL: 0
; 0000 0197         putchar0('S');
;PCODE: $0000026E VOL: 0
;PCODE: $0000026F VOL: 0
; 0000 0198         speed_ecu_prev=speed_ecu;
;PCODE: $00000270 VOL: 0
;PCODE: $00000271 VOL: 0
; 0000 0199     }
;PCODE: $00000272 VOL: 0
;PCODE: $00000273 VOL: 0
; 0000 019A }
;PCODE: $00000274 VOL: 0
;PCODE: $00000275 VOL: 0
;PCODE: $00000276 VOL: 0
